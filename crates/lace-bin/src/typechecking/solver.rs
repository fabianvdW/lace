use crate::lice::Lice;
use crate::syntax_id::NodeId;
use crate::typechecking::constraint::Constraint;
use crate::typechecking::context::{NameMapping, TypeMapping};
use crate::typechecking::error::TypeError;
use crate::typechecking::ty::{ConcreteType, Type, TypeVariable, TypeVariableGenerator};
use bumpalo::collections::Vec as BumpVec;
use bumpalo::Bump;
use unionfind::VecUnionFind;

pub struct Solver<'a> {
    type_mapping: TypeMapping<'a>,
    // TODO: find a better way to do this. I hate partial struct borrows
    // None *during* constraint application, passed as explicit parameter
    uf: Option<VecUnionFind<usize>>,
}

impl<'a> Solver<'a> {
    pub fn new(variable_generator: TypeVariableGenerator, type_mapping: TypeMapping<'a>) -> Self {
        Self {
            type_mapping,
            uf: Some(
                VecUnionFind::new(0..=variable_generator.num_generated())
                    .unwrap_or_lice("always increasing"),
            ),
        }
    }

    fn do_union(&mut self, a: TypeVariable, b: TypeVariable) -> TypeVariable {
        // look up if any correspond to concrete types we know
        let type_a = self.type_mapping.get(&a);
        let type_b = self.type_mapping.get(&b);
        match (type_a, type_b) {
            // if not, we choose one by a random dice roll. My dice rolled 0 so we choose a
            (None, None) => a,
            // if one of them is concrete, make that the representative
            (Some(_), None) => a,
            // or the other
            (None, Some(_)) => b,
            // however, when both are concrete, we can only union if they are the same.
            // we don't actually check that here. Instead, we assume they are the same,
            // continue with a (random dice roll) and then later check if they really were
            // the same or that we went ahead with the wrong type.
            (Some(concrete_a), Some(concrete_b)) => {
                self.maybe_bad_union(a, b, *concrete_a, *concrete_b);
                a
            }
        }
    }

    fn union(&mut self, uf: &mut VecUnionFind<usize>, a: TypeVariable, b: TypeVariable) {
        uf.union_by(&a.as_usize(), &b.as_usize(), |a, b| {
            self.do_union(TypeVariable::from_usize(a), TypeVariable::from_usize(b))
                .as_usize()
        })
        .unwrap_or_lice("all variables were inserted at the start");
    }

    pub fn apply_constraints(self, constraints: Vec<Constraint>) -> Result<SolvedTypes, TypeError> {
        let Self{ type_mapping, uf } = self;

        for constraint in constraints {
            match constraint {
                Constraint::Equal(a, b) => {
                    // pass uf explicitly
                    self.union(&mut uf, a, b);
                }
            }
        }

        Ok(SolvedTypes {
            name_mapping,
            type_mapping: self.type_mapping,
            uf: self
                .uf
                .unwrap_or_lice("don't generate type errors while constraint processing"),
        })
    }

    fn maybe_bad_union(
        &mut self,
        type_variable_a: TypeVariable,
        type_variable_b: TypeVariable,
        concrete_a: ConcreteType<'a>,
        concrete_b: ConcreteType<'a>,
    ) {
        self.maybe_bad_unions.push(MaybeBadUnion {
            type_variable_a,
            type_variable_b,
            concrete_a,
            concrete_b,
        });
    }

    fn process_maybe_bad_union(&self, union: &MaybeBadUnion) -> Result<(), TypeError> {
        println!(
            "attempted union between {:?} and {:?}",
            union.concrete_a, union.concrete_b
        );
        // TODO: reject

        Ok(())
    }
}

pub struct SolvedTypes<'a> {
    name_mapping: NameMapping,
    type_mapping: TypeMapping<'a>,
    uf: VecUnionFind<usize>,
}

impl<'a> SolvedTypes<'a> {
    /// Finds a representative type variable (one that maps to a concrete type through `type_mapping`)
    /// for any type variable.
    ///
    /// # ICE
    /// When the type variable was not typechecked (so not generated by VariableGenerator).
    fn find_representative(&self, var: TypeVariable) -> TypeVariable {
        TypeVariable::from_usize(
            self.uf
                .find(&var.as_usize())
                .unwrap_or_lice("type variable not in union find"),
        )
    }

    fn resolve_type_recursive<'x>(&self, ty: TypeVariable, arena: &'x Bump) -> Type<'x> {
        let representative = self.find_representative(ty);
        let type_of_representative = self.type_mapping.get(&representative).unwrap_or_else(|| {
            lice!(
                "type variable is not concrete: type variable {}",
                representative.as_usize(),
            )
        });

        match type_of_representative {
            ConcreteType::Int => Type::Int,
            ConcreteType::Bool => Type::Bool,
            ConcreteType::Function { params, ret } => {
                let mut new_params = BumpVec::new_in(arena);

                for i in *params {
                    let ty = self.resolve_type_recursive(*i, arena);
                    new_params.push(ty);
                }

                Type::Function {
                    params: new_params.into_bump_slice(),
                    ret: arena.alloc(self.resolve_type_recursive(**ret, arena)),
                }
            }
            ConcreteType::Tuple(t) => {
                let mut new = BumpVec::new_in(arena);

                for i in *t {
                    let ty = self.resolve_type_recursive(*i, arena);
                    new.push(ty);
                }

                Type::Tuple(new.into_bump_slice())
            }
            ConcreteType::String => Type::String,
        }
    }

    pub fn type_of_name<'x>(&self, name_node_id: NodeId, arena: &'x Bump) -> Option<Type<'x>> {
        let typevar = self.name_mapping.get(&name_node_id)?;
        Some(self.resolve_type_recursive(*typevar, arena))
    }
}
